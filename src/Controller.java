import java.util.ArrayList;

public class Controller {

    private ArrayList<Consumer> consumers;
    private Source source;
    private Storage storage;
    private double sourceEff;

    public Controller(ArrayList<Consumer> consumers, Source source, Storage storage){
        this.consumers = consumers;
        this.storage = storage;
        this.source = source;
    }

    //everything that needs to be done in one simulation cycle
    public void cycle(double sourceEff){
        this.sourceEff = sourceEff;
        increaseStorage();
        consume();
    }


    // charges the storage with the source and checks if there is too much charge
    private void increaseStorage(){
        int chargeGen = source.getOutput(sourceEff);
        System.out.println("Output generated by Source: " + chargeGen);
        System.out.println("Current storage status: " + storage.getStatus());
        int toNetwork = storage.increase(chargeGen);
        System.out.println("Output to network: " + toNetwork);
    }

    //every consumer consumes from the storage and outputs if storage is empty
    private void consume(){
        int fromNetwork = 0;
        for (Consumer consumer:consumers) {
            fromNetwork += storage.reduce(consumer.getReq());
        }
        System.out.println("Taken from network: " + fromNetwork);
    }

    public double getSourceEff() {
        return sourceEff;
    }

    public Source getSource() {
        return source;
    }

    public Storage getStorage() {
        return storage;
    }
}
